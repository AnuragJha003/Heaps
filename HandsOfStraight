M1:MAP APPROACH 


class Solution {
public:
    bool isNStraightHand(vector<int>& hand, int gs) {
        int n = hand.size();
        if(n % gs != 0)
            return false;

        map<int,int> mp;
        for(auto h : hand)
            mp[h]++;
        
        int prev;
        while(!mp.empty())
        {
            int startVal = mp.begin()->first;
            for(int i = 0; i < gs; i++)
            {
                if(mp.find(startVal+i) == mp.end())
                    return false;
                mp[startVal+i]--;
                if(mp[startVal+i] == 0)
                    mp.erase(startVal+i);
            }
        }
        return true;
    }
};

M2:USING HEAPS


bool isNStraightHand(vector<int>& hand, int groupSize) {

    if(hand.size()%groupSize!=0)
        return false;
    
    unordered_map<int,int> map;
    priority_queue<int,vector<int>,greater<int>> pq;
    
    for(auto x:hand){
        map[x]++;
    }
    
    for(auto p:map){
        pq.push(p.first);
    }
    
    while(!pq.empty()){
        int val=pq.top();
        for(int i=0;i<groupSize;i++){
            if(map.find(i+val)==map.end())
                return false;
            
            map[i+val]--;
            if(map[i+val]==0)
            {
                //if(i+val != pq.top())
                //    return false;
                pq.pop();
            }
        }
    }
    return true;
}



https://leetcode.com/problems/hand-of-straights/
